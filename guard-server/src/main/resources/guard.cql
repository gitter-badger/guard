CREATE KEYSPACE IF NOT EXISTS guard WITH replication = {'class':'NetworkTopologyStrategy', 'datacenter1':1};
USE guard;

CREATE TABLE IF NOT EXISTS users_by_email (email TEXT, pwd TEXT, sub TEXT, given_name TEXT, family_name TEXT, email_verified BOOLEAN, address TEXT, phone_number TEXT, phone_number_verified BOOLEAN, disable BOOLEAN, guard_id_origin TEXT, security_question MAP<INT, TEXT>, advanced_attr Map<TEXT, TEXT>, pin TEXT, PRIMARY KEY (email));

CREATE TABLE IF NOT EXISTS clients_by_id (client_id TEXT, client_name TEXT, client_secret TEXT, client_type TEXT, client_description TEXT, client_redirect_uris SET<TEXT>, cert TEXT, cert_subject_dn TEXT, client_managers SET<TEXT>, client_labels Map<TEXT, TEXT>, client_access_policies SET<TEXT>, disable BOOLEAN, PRIMARY KEY (client_id));

CREATE TABLE IF NOT EXISTS scopes_by_name (name TEXT, en_description TEXT, fr_description TEXT, restricted BOOLEAN, one_shot BOOLEAN, end_user_mfa BOOLEAN, machine_mfa BOOLEAN, client_id_list SET<TEXT>, authorized_flows SET<TEXT>, client_id_list_for_implicit_consent SET<TEXT>, scope_managers SET<TEXT>, refresh_token_ttl INT, consent_ttl INT, consent_url TEXT, trust_ca_chain TEXT, PRIMARY KEY (name));

CREATE TABLE IF NOT EXISTS consents_by_scope (scope_name TEXT, user_email TEXT, client_id TEXT, timestamp TIMESTAMP, expire_at TIMESTAMP, client_name TEXT, PRIMARY KEY (scope_name, user_email, client_id)) WITH CLUSTERING ORDER BY (user_email ASC, client_id ASC);

CREATE MATERIALIZED VIEW IF NOT EXISTS consents_by_user AS SELECT user_email, scope_name, client_id, timestamp, expire_at, client_name FROM guard.consents_by_scope WHERE user_email IS NOT NULL AND scope_name IS NOT NULL AND client_id IS NOT NULL AND TIMESTAMP IS NOT NULL PRIMARY KEY (user_email, scope_name, client_id);

CREATE TABLE IF NOT EXISTS authz_code (code TEXT, client_id TEXT, redirect_uri TEXT, state TEXT,, nonce TEXT, refresh_token_ttl INT, scope SET<TEXT>, one_shot_scopes SET<TEXT>, principal TEXT, client_name TEXT, machine_mfa BOOLEAN, PRIMARY KEY (code, client_id)) WITH CLUSTERING ORDER BY (client_id ASC);

CREATE TABLE IF NOT EXISTS refresh_token (id TEXT, client_id TEXT, issue_at TIMESTAMP, refresh_token_ttl INT, scope SET<TEXT>, principal TEXT, client_name TEXT, x509_hash TEXT, PRIMARY KEY (id, client_id)) WITH CLUSTERING ORDER BY (client_id ASC);

CREATE TABLE IF NOT EXISTS adapters_by_id (id TEXT, name TEXT, description TEXT, type TEXT, logo_url TEXT, trigger_on_hostname TEXT, adapter_url TEXT, client_id TEXT, public_key TEXT, PRIMARY KEY (id));

INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_READ_CLIENTS', 'Read guard clients', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_CREATE_CLIENTS', 'Create guard clients','',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_UPDATE_CLIENTS', 'Update guard clients', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_DELETE_CLIENTS', 'Delete guard clients', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_READ_USERS', 'Read guard users', '',  true,  false, false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_CREATE_USERS', 'Create guard users', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_UPDATE_USERS', 'Update guard users', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_DELETE_USERS', 'Delete guard users', '',  true, false,  false, false, {'guard'},  {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_READ_SCOPES', 'Read guard scopes', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES('GUARD_CREATE_SCOPES', 'Create guard scopes', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_UPDATE_SCOPES', 'Update guard scopes', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_READ_CONSENTS', 'Read guard consents', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_CREATE_CONSENTS', 'Create guard consents', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_DELETE_CONSENT', 'Delete guard consents', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('GUARD_GENERATE_USER_TOKEN', 'Generate guard user token', '',  true, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;
INSERT INTO guard.scopes_by_name (name, en_description, fr_description, restricted, one_shot,  end_user_mfa, machine_mfa, client_id_list, client_id_list_for_implicit_consent, refresh_token_ttl, consent_ttl, trust_ca_chain) VALUES ('openid', 'This scope lets the client app access to your personal information', 'Cet scope permet à l''application cliente d''accéder à vos informations personnelles',  false, false,  false, false, {'guard'}, {'guard'}, 720, 360, '') IF NOT EXISTS;